---
title: "Violence Analysis"
output: html_document
---

## Toxicity Analysis

The Grievance Dictionary (GD) can be used to assess grievance-fuelled communications through language. There are 22 psychological and content categories currently measured with the Grievance Dictionary, namely:

-   Planning
-   Violence
-   Weaponry
-   Help seeking
-   Hate
-   Frustration
-   Suicide
-   Threat
-   Grievance
-   Fixation
-   Desperation
-   Deadline
-   Murder
-   Relationship
-   Loneliness
-   Surveillance
-   Soldier
-   Honour
-   Impostor
-   Jealousy
-   God
-   Paranoia

Originally, the Grievance Dictionary model uses proportional scoring

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(ISLR, readxl, tidyverse, magrittr, dplyr, ggplot2, ggrepel, quanteda)

```

## Toxicity Analysis

The Grievance Dictionary (GD) can be used to assess grievance-fuelled communications through language. There are 22 psychological and content categories currently measured with the Grievance Dictionary, namely:

-   Planning
-   Violence
-   Weaponry
-   Help seeking
-   Hate
-   Frustration
-   Suicide
-   Threat
-   Grievance
-   Fixation
-   Desperation
-   Deadline
-   Murder
-   Relationship
-   Loneliness
-   Surveillance
-   Soldier
-   Honour
-   Impostor
-   Jealousy
-   God
-   Paranoia

### Proportional scoring (wordcount-based)

The first approach makes use of word counts, where words from the dictionary categories are searched and counted in your text(s) of interest. These counts are then divided by the total number of words in the text, resulting in a proportion score. You can then obtain the proportion for each GD category (i.e., the sum of all individual word proportions in the category) as well as the proportion scores for each individual word found in the text(s).

### Weight-based approach

The second approach makes use of weights assigned to each word in the GD obtained through crowdsourced annotations. Each word was rated for the extent to which it fits into its overarching category (scale 0-10). For example, the word "knife" fits well into the category "weaponry" and may have a weight of 9. In the weight-based approach words from the dictionary categories are searched and the associated weight is assigned. You can then obtain the average for each GD category as well as the individual words found in the text(s).

### Word inclusion criteria

For both the word count and weight-based approaches, it is important to select a dictionary with the word inclusion criteria of your choice. The analyses in our paper were all performed with the GD which includes words that received a goodness-of-fit rating of at least 7 or higher. Alternatively, you can opt for a less stringent version including words with a rating of 5 or higher. For the weight based approach, you may also opt for a dictionary which includes all words and their associated weights. Note that the words in this dictionary will range from very low to very high goodness-of-fit weights.

### Minimum Character Count

Originally, this model had a minimum character count of 50, but we have removed this requirement.

```{r}
# Some preparations first..
# Define an example text
example_text = "This is an example of a very violent text, I will do horrible, deadly, bloody things. I will use my AK-47, and several knives and machetes for stabbing. I am very frustrated by this, but this is my final warning. I am obsessed with achieving this, so beware of my attack."

# Now, source the GD functions.
biden2020 <- read.csv("/Users/W_Chu/Documents/UPenn 2024/Group_6_Project/data/biden2020.csv", header = TRUE, stringsAsFactors = F)

source('grievance_lookup.R')
```

```{r message=FALSE, warning=FALSE}
load('qdictionary_7plus.Rdata')
results_1 <-grievance_lookup(biden2020$text, # specify the text vector
                             dict = qdictionary_7plus, # specify the dictionary version
                             df_or_dfm = "dfm") # return a document-feature-matrix

# Look at the results (a list with two elements)
print(results_1, max_nfeat = 23) # gives you the scores per category and the % of words not matched

bidenviolence <- convert(results_1, to = "data.frame") 
write.csv(bidenviolence, file="/Users/W_Chu/Documents/UPenn 2024/Group_6_Project/data/bidenviolence.csv")
```

```{r}
trump2020 <- read.csv("/Users/W_Chu/Documents/UPenn 2024/Group_6_Project/data/trump2020.csv", header = TRUE, stringsAsFactors = F)

results_2 <-grievance_lookup(trump2020$text, # specify the text vector
                             dict = qdictionary_7plus, # specify the dictionary version
                             df_or_dfm = "dfm") # return a document-feature-matrix

# Look at the results (a list with two elements)
print(results_2, max_nfeat = 23) # gives you the scores per category and the % of words not matched

trump2020violence <- convert(results_2, to = "data.frame") 
write.csv(trump2020violence, file="/Users/W_Chu/Documents/UPenn 2024/Group_6_Project/data/trump2020violence.csv")

```
