---
title: "EDA"
format: html
---

## EDA

We first load in necessary data frames. We will use `allcombined` as our first data frame, which includes original text and emotion, sentiment, toxicity, and violence analysis.

```{r r Setup, include=FALSE, results='hide', warning=FALSE}
knitr::opts_chunk$set(echo = F, fig.width=8, fig.height=4, warning = F)
options(scipen = 0, digits = 3)  ## controls base R output

## Package setup
if(!require("pacman")) install.packages("pacman")

pacman::p_load(tidyverse, dplyr, ggplot2, data.table, lubridate, plotROC, usmap, glmnet, knitr, xtable, vader, cowplot)
```

```{r loading in allcombined}
allcombined <- read.csv("/Users/joy/Desktop/summer/Group_6_Project/data/allcombined.csv", header = TRUE, stringsAsFactors = FALSE)
```

We also set colors for each author. Biden will be dark blue, and Trump will be red.

For our other categorical variable, `emotion_label`, we make JOY yellow, ANGER pink, and SADNESS cyan.

```{r setting colors}
authorcolors <- c("biden" = "#00AEF3", "trump" = "#E81B23")

emotioncolors <- c("ANGER" = "pink", "JOY" = "yellow", "SADNESS" = "cyan")
```

## Selecting Validation Data

We must select validation data first. Then, we will save `cv_data` (used for training/testing) and `valid_data` as .csv files to use.

```{r selecting validation data}
set.seed(1)

cv_index <- sample(1:nrow(allcombined), 0.85*nrow(allcombined))
cv_data <- allcombined[cv_index,]
#use rest of data to do cross-validation

valid_data <- cv_data[-cv_index,]

write.csv(cv_data, file = "/Users/joy/Desktop/summer/Group_6_Project/data/cv_data.csv", row.names = FALSE)
write.csv(valid_data, file = "/Users/joy/Desktop/summer/Group_6_Project/data/valid_data.csv", row.names = FALSE)
```

## Sentiment for each Person

(Sentiment is expressed through the `compound` column)

```{r sentiment for each person}
compoundperperson <- cv_data %>% 
  ggplot(aes(x = author, y = compound, fill = author)) +
  geom_boxplot() +
  xlab("President") +
  ylab("compound") +
  ggtitle("Sentiment for each Person") +
  scale_fill_manual(values = authorcolors)

compoundperperson
```

## Emotion Intensity for each Person

```{r emotion intensity per person}
emotion_scoreperperson <- cv_data %>% 
  ggplot(aes(x = author, y = emotion_score, fill = author)) +
  geom_boxplot() +
  labs( title = "Emotion Intensity for each Person", x = "President", y = "emotion_score") +
  scale_fill_manual(values = authorcolors)

emotion_scoreperperson

```

## Frequency of Each Emotion (per person)

```{r frequency of each emotion}

bidenjoy <- nrow(cv_data %>% filter(author == "biden") %>% filter(emotion_label == "JOY"))/nrow(cv_data %>% filter(author == "biden"))
bidenanger <- nrow(cv_data %>% filter(author == "biden") %>% filter(emotion_label == "ANGER"))/nrow(cv_data %>% filter(author == "biden"))
bidensad <- nrow(cv_data %>% filter(author == "biden") %>% filter(emotion_label == "SADNESS"))/nrow(cv_data %>% filter(author == "biden"))

trumpjoy <- nrow(cv_data %>% filter(author == "trump") %>% filter(emotion_label == "JOY"))/nrow(cv_data %>% filter(author == "trump"))
trumpanger <- nrow(cv_data %>% filter(author == "trump") %>% filter(emotion_label == "ANGER"))/nrow(cv_data %>% filter(author == "trump"))
trumpsad <- nrow(cv_data %>% filter(author == "trump") %>% filter(emotion_label == "SADNESS"))/nrow(cv_data %>% filter(author == "trump"))


bidenjoy 
bidenanger
bidensad

trumpjoy
trumpanger
trumpsad

# Create the data frame
tweets_data <- data.frame(
  Sentiment = rep(c("Angry", "Happy", "Sad"), 2),
  Count = c(trumpanger, trumpjoy, trumpsad, bidenanger, bidenjoy, bidensad),
  Person = rep(c("Donald Trump", "Joe Biden"), each = 3)
)

# Create the bar plot
ggplot(tweets_data, aes(x = Sentiment, y = Count, fill = Person)) +
  geom_bar(stat = "identity", position = position_dodge())+
  labs(
    title = "Comparison of Emotional Tweets between Donald Trump and Joe Biden",
    x = "Sentiment",
    y = "Percentage of Tweets"
  ) +
    scale_fill_manual(values= c( "#E81B23", "#00AEF3", "#E81B23","#00AEF3", "#E81B23","#00AEF3"))

```

## Sentiment over Time

```{r sentiment over time}
cv_data$datetime <- as.POSIXct(cv_data$datetime, format = "%Y-%m-%d %H:%M:%S")

intervention_date_election <- as.POSIXct("2020-11-07")
intervention_date_jan6 <- as.POSIXct("2021-01-06")

weeklysummary <- cv_data %>% 
  mutate(week = floor_date(datetime, unit = "week")) %>% 
  group_by(week, author) %>%
  summarize(weeklycompound = mean(compound), weeklyemotion_score = mean(emotion_score)) %>% 
  ungroup()

weeklysummary <- weeklysummary[-c(109:109),]
 #removing row 109 because it is not a full week and as no Trump tweets, and is therefore ungraphable


sentimenttime <- weeklysummary %>% 
  ggplot(aes(x = week, y = weeklycompound, group = author, col = author)) +
  geom_line() +
  geom_point() +
  labs(title = "Sentiment over Time", x = "datetime", y = "weekly avg compound") +
  scale_color_manual(values = authorcolors) +
  geom_vline(xintercept = as.numeric(intervention_date_election), linetype = "dotted", color = "black") +
  geom_vline(xintercept = as.numeric(intervention_date_jan6), linetype = "dotted", color = "black") 

sentimenttime
```

## Emotional Intensity over Time

```{r emotion intensity over time}
emotion_scoretime <- weeklysummary %>% 
  ggplot(aes(x = week, y = weeklyemotion_score, group = author, col = author)) +
  geom_line() +
  geom_point() +
  labs(title = "Emotion Intensity over Time, Interruption at Week of Nov 7, 2020", x = "datetime", y = "weekly avg emotion_score") +
  scale_color_manual(values = authorcolors) +
  geom_vline(xintercept = as.numeric(intervention_date_election), linetype = "dotted", color = "black") +
  geom_vline(xintercept = as.numeric(intervention_date_jan6), linetype = "dotted", color = "black") 

emotion_scoretime

```

## Likes vs. Emotional Intensity

```{r likes v emotional intensity}
bidenemotionlike <- cv_data %>% 
  filter(author == "biden") %>% 
  ggplot(aes(x = emotion_score, y = likeCount10k, group = emotion_label, color = emotion_label)) +
  geom_point(size = 1, alpha = .4) +
  geom_smooth(aes(x = emotion_score, y = likeCount10k, group = emotion_label, color = emotion_label), method = "lm") +
  labs(title = "Biden's Emotion Score vs. Likes per Emotion Label", x = "emotion_score", y = "likeCount10k") +
  xlim(0,1) +
  ylim(0, 3100000) +
  scale_color_manual(values = emotioncolors)

trumpemotionlike <- cv_data %>% 
  filter(author == "trump") %>% 
  ggplot(aes(x = emotion_score, y = likeCount10k, group = emotion_label, color = emotion_label)) +
  geom_point(size = 1, alpha = .4) +
  geom_smooth(aes(x = emotion_score, y = likeCount10k, group = emotion_label, color = emotion_label), method = "lm") +
  labs(title = "Trump's Emotion Score vs. Likes per Emotion Label", x = "emotion_score", y = "likeCount10k") +
  xlim(0,1) +
  ylim(0, 3100000) +
  scale_color_manual(values = emotioncolors)

bidenemotionlike
trumpemotionlike
  
```

## Retweets vs. Emotional Intensity

```{r retweets v emotional intensity}
bidenemotionretweet <- cv_data %>% 
  filter(author == "biden") %>% 
  ggplot(aes(x = emotion_score, y = retweetCount, group = emotion_label, color = emotion_label)) +
  geom_point(size = 1, alpha = .4) +
  geom_smooth(aes(x = emotion_score, y = retweetCount, group = emotion_label, color = emotion_label), method = "lm") +
  labs(title = "Biden's Emotion Score vs. Retweets per Emotion Label", x = "emotion_score", y = "retweetCount") +
  xlim(0,1) +
  ylim(0, 2000000) +
  scale_color_manual(values = emotioncolors)

trumpemotionretweet <- cv_data %>% 
  filter(author == "trump") %>% 
  ggplot(aes(x = emotion_score, y = retweetCount, group = emotion_label, color = emotion_label)) +
  geom_point(size = 1, alpha = .4) +
  geom_smooth(aes(x = emotion_score, y = retweetCount, group = emotion_label, color = emotion_label), method = "lm") +
  labs(title = "Trump's Emotion Score vs. Retweets per Emotion Label", x = "emotion_score", y = "retweetCount") +
  xlim(0,1) +
  ylim(0, 2000000) +
  scale_color_manual(values = emotioncolors)


bidenemotionretweet
trumpemotionretweet

```

## Likes vs. All Variables

We plot scatter plots of all variables against like count.

```{r}
df <- cv_data %>% select(likeCount10k, retweetCount:author) %>% dplyr::select_if(., is.numeric)


df_long <- df %>% pivot_longer(cols = c(retweetCount:sexual_explicit), values_to = 'value')

allvarplot <- ggplot(df_long)+
  geom_point(aes(value, likeCount10k), alpha = 0.5, color = "lightgreen")+
  geom_smooth(aes(value, likeCount10k), method = "lm", color = "violet") +
  facet_wrap(~name, scales = 'free')

print(allvarplot)

mean(cv_data$likeCount10k)
```
