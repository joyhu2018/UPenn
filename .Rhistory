knitr::opts_chunk$set(echo = F, fig.width=8, fig.height=4, warning = F)
options(scipen = 0, digits = 3)  ## controls base R output
## Package setup
if(!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, dplyr, ggplot2, data.table, lubridate, plotROC, usmap, glmnet, knitr, xtable, vader, randomForest, tree, ISLR, rpart, ranger, rattle, pROC, partykit, lda, stargazer, gridExtra, caret, rpart.plot)
allcombined <- read.csv("data/allcombined.csv", header = TRUE, stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = F, fig.width=8, fig.height=4, warning = F)
options(scipen = 0, digits = 3)  ## controls base R output
## Package setup
if(!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, dplyr, ggplot2, data.table, lubridate, plotROC, usmap, glmnet, knitr, xtable, vader, randomForest, tree, ISLR, rpart, ranger, rattle, pROC, partykit, lda, stargazer, gridExtra, caret, rpart.plot)
allcombined <- read.csv("/Users/joy/Desktop/UPenn/allcombined.csv", header = TRUE, stringsAsFactors = FALSE)
cv_data <- read.csv("/Users/joy/Desktop/UPenn/allcombined.csv", header = TRUE, stringsAsFactors = FALSE)
valid_data <- read.csv("/Users/joy/Desktop/UPenn/allcombined.csv", header = TRUE, stringsAsFactors = FALSE)
cv_short <- cv_data %>% select(-retweetCount, - id, -text, -datetime)
fitsinglerp <- rpart(likeCount10k ~ ., data = cv_short, minsplit=2, cp=.009)
plot(as.party(fitsinglerp), main="A Tree with Rpart")
rpart.plot(fitsinglerp, type = 2, fallen.leaves = TRUE,
main = "RPart Single Decision Tree")
#ncol(cv_data) #seeing how many variables
set.seed(1)
fitrf <- randomForest(likeCount10k ~ .,data = cv_short, mtry=37, ntree=250)
#summary(fitrf)
#tuning ntree
fitrf.tune <- randomForest(likeCount10k~., data = cv_short, mtry=5, ntree=100) # change ntree
plot(fitrf.tune, col="red", pch=16, type="p",
main="Random Forest testing error")
#tuning mtry
rf.error.p <- 1:37
for (p in 1:37)
{fit.rf <- randomForest(likeCount10k~., data = cv_short, mtry=p, ntree=100) #plot(fit.rf, col= p, lwd = 3)
rf.error.p[p] <- fit.rf$mse[100]
}
rf.error.p
#visualizing mtry
plot(1:37, rf.error.p, pch=16,
main = "Testing errors of mtry with 200 trees", xlab="mtry",
ylab="mse of mtry")
lines(1:37, rf.error.p)
fitrf.final <- randomForest(likeCount10k~., data = cv_short, mtry=4, ntree=100)
plot(fitrf.final)
fitrf.final.pred <- predict(fitrf.final, valid_data)
error_fitrf.final <- mean((valid_data$likeCount10k - fitrf.pred)^2)
fitrf.final.pred <- predict(fitrf.final, valid_data)
error_fitrf.final <- mean((valid_data$likeCount10k - fitrf.final.pred)^2)
error_fitrf.final
plot(fitrf.final, type="p", pch=16,col="blue", main = "fitrf.final testing errors" )
#tuning ntree
fitrf.tune <- randomForest(likeCount10k~., data = cv_short, mtry=5, ntree=100) # change ntree
plot(fitrf.tune, col="red", pch=16, type="p",
main="Random Forest testing error")
#tuning ntree
fitrf.tune <- randomForest(likeCount10k~., data = cv_short, mtry=5, ntree=100) # change ntree
plot(fitrf.tune, col="red", pch=16, type="p",
main="Random Forest testing error")
#tuning mtry
rf.error.p <- 1:37
for (p in 1:37)
{fit.rf <- randomForest(likeCount10k~., data = cv_short, mtry=p, ntree=100) #plot(fit.rf, col= p, lwd = 3)
rf.error.p[p] <- fit.rf$mse[100]
}
rf.error.p
#visualizing mtry
plot(1:37, rf.error.p, pch=16,
main = "Testing errors of mtry with 200 trees", xlab="mtry",
ylab="mse of mtry")
lines(1:37, rf.error.p)
fitrf.final <- randomForest(likeCount10k~., data = cv_short, mtry=7, ntree=100)
plot(fitrf.final)
# Create the data for the chart
A <- c(17, 32, 8, 53, 1)
# Plot the bar chart
barplot(A, xlab = "X-axis", ylab = "Y-axis", main ="Bar-Chart")
# Sample data
data <- data.frame(
Category = c("A", "B", "C", "D"),
Value = c(10, 15, 7, 12)
)
library(ggplot2)
# Sample data
data <- data.frame(
Category = c("A", "B", "C", "D"),
Value = c(10, 15, 7, 12)
)
# Create bar chart with grid and light blue fill
ggplot(data, aes(x = Category, y = Value, fill = Category)) +
geom_bar(stat = "identity", fill = "lightblue") +
theme_minimal() +
theme(panel.grid.major = element_line(color = "gray", size = 0.5),
panel.grid.minor = element_line(color = "lightgray", size = 0.25)) +
labs(title = "Simple Bar Chart with Grid", x = "Category", y = "Value")
library(ggplot2)
# Sample data
data <- data.frame(
Category = c("A", "B", "C"),
Value = c(10, 15, 7),
Fill = c("lightblue", "darkblue", "lightblue")
)
# Create bar chart with grid and customized fill colors
ggplot(data, aes(x = Category, y = Value, fill = Fill)) +
geom_bar(stat = "identity") +
scale_fill_identity() +
theme_minimal() +
theme(panel.grid.major = element_line(color = "gray", size = 0.5),
panel.grid.minor = element_line(color = "lightgray", size = 0.25)) +
labs(title = "Simple Bar Chart with Grid", x = "Category", y = "Value")
library(ggplot2)
# Sample data
data <- data.frame(
Category = c("relaxed LASSO", "neural net", "random forest"),
Value = c(149.0, 143.1, 34),
Fill = c("#e5f3ff", "#e5f3ff", "#00aff4")
)
# Create bar chart with grid and customized fill colors
ggplot(data, aes(x = Category, y = Value, fill = Fill)) +
geom_bar(stat = "identity") +
scale_fill_identity() +
theme_minimal() +
theme(panel.grid.major = element_line(color = "gray", size = 0.5),
panel.grid.minor = element_line(color = "lightgray", size = 0.25)) +
labs(title = "Simple Bar Chart with Grid", x = "Category", y = "Mean Square Error")
library(ggplot2)
# Sample data
data <- data.frame(
Category = c("relaxed LASSO", "neural net", "random forest"),
Value = c(149.0, 143.1, 34)
)
# Create bar chart with grid and customized fill colors
ggplot(data, aes(x = factor(Category, levels = Category), y = Value, fill = Category)) +
geom_bar(stat = "identity", fill = c("#e5f3ff", "#e5f3ff", "#00aff4")) +
theme_minimal() +
theme(panel.grid.major = element_line(color = "gray", size = 0.5),
panel.grid.minor = element_line(color = "lightgray", size = 0.25)) +
labs(y = "Mean Squared Error")
library(ggplot2)
# Sample data
data <- data.frame(
Category = c("relaxed LASSO", "neural net", "random forest"),
Value = c(150, 150, 32.2)
)
# Create bar chart with grid and customized fill colors
ggplot(data, aes(x = factor(Category, levels = Category), y = Value, fill = Category)) +
geom_bar(stat = "identity", fill = c("#e5f3ff", "#e5f3ff", "#00aff4")) +
theme_minimal() +
theme(panel.grid.major = element_line(color = "gray", size = 0.5),
panel.grid.minor = element_line(color = "lightgray", size = 0.25)) +
labs(y = "Mean Squared Error")
